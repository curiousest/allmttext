name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REGION: us-central1
  SERVICE_NAME: update-embeddings
  REPOSITORY_NAME: update-embeddings-repo
  IMAGE_NAME: us-central1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/update-embeddings-repo/update-embeddings
  CLOUD_RUN_SA_EMAIL: ${{ secrets.CLOUD_RUN_SA_EMAIL }} 

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Run Tests
        run: |
          pip install -r app/requirements.txt
          python -m unittest discover -s app/tests

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          install_components: beta

      - name: Configure Docker to use gcloud as a credential helper
        run: |
          gcloud auth configure-docker $REGION-docker.pkg.dev --quiet

      - name: Create Artifact Registry Repository if not exists
        run: |
          gcloud artifacts repositories create $REPOSITORY_NAME \
            --repository-format=docker \
            --location=$REGION \
            --description="Docker repository for update-embeddings" || true

      - name: Build Docker Image
        run: |
          docker build -t $IMAGE_NAME:$GITHUB_SHA -f Dockerfile .

      - name: Tag Docker Image as Latest
        run: |
          docker tag $IMAGE_NAME:$GITHUB_SHA $IMAGE_NAME:latest

      - name: Push Docker Image
        run: |
          docker push $IMAGE_NAME:$GITHUB_SHA
      
      - name: Push Docker Image as Latest
        run: |
          docker push $IMAGE_NAME:latest

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Configure Google Credentials for Terraform
        run: |
          echo "${{ secrets.GCP_SA_KEY }}" > "${HOME}/gcloud.json"
        shell: bash

      - name: Export GOOGLE_APPLICATION_CREDENTIALS
        run: |
          echo "GOOGLE_APPLICATION_CREDENTIALS=${HOME}/gcloud.json" >> $GITHUB_ENV

      - name: Terraform Init
        run: terraform init
        env:
          GOOGLE_APPLICATION_CREDENTIALS: ${{ env.GOOGLE_APPLICATION_CREDENTIALS }}

      - name: Terraform Apply
        run: terraform apply -auto-approve -var="image_tag=${GITHUB_SHA}"
        env:
          TF_VAR_project_id: ${{ secrets.GCP_PROJECT_ID }}
          TF_VAR_openai_api_key: ${{ secrets.OPENAI_API_KEY }}
          TF_VAR_pinecone_api_key: ${{ secrets.PINECONE_API_KEY }}
          GOOGLE_APPLICATION_CREDENTIALS: ${{ env.GOOGLE_APPLICATION_CREDENTIALS }}
    # Pass other variables as needed



  terraform:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          version: 'latest'
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          install_components: beta

      - name: Configure Google Credentials for Terraform
        run: |
          echo "${{ secrets.GCP_SA_KEY }}" > "${HOME}/gcloud.json"
        shell: bash

      - name: Export GOOGLE_APPLICATION_CREDENTIALS
        run: |
          echo "GOOGLE_APPLICATION_CREDENTIALS=${HOME}/gcloud.json" >> $GITHUB_ENV

      - name: Terraform Init
        working-directory: terraform
        run: terraform init
        env:
          GOOGLE_APPLICATION_CREDENTIALS: ${{ env.GOOGLE_APPLICATION_CREDENTIALS }}

      - name: Terraform Apply
        working-directory: terraform
        run: terraform apply -auto-approve
        env:
          TF_VAR_project_id: ${{ secrets.GCP_PROJECT_ID }}
          TF_VAR_openai_api_key: ${{ secrets.OPENAI_API_KEY }}
          TF_VAR_pinecone_api_key: ${{ secrets.PINECONE_API_KEY }}
          GOOGLE_APPLICATION_CREDENTIALS: ${{ env.GOOGLE_APPLICATION_CREDENTIALS }}

